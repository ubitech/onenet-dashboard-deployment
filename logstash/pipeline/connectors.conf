### enable for SSL communication between logstash instances. Needs company infrastructure changes.
### cannot be used with the current setup as the haproxy strip down the certificates
### of the sender logstash and proxy/forward the request plain unencrypted. In order to use like that some
### changes are required so the domain doesnt impose any SSL communication thus allowing direct communication
### between a remote logstash and this local one
# input {
#     http {
#     port => 5044
#     ssl => true
#     ssl_certificate => '/etc/logstash/config/certs/logstash_combined.crt'
#     ssl_key => '/etc/logstash/config/certs/logstash.key'
#     ssl_certificate_authorities => ["/etc/logstash/config/certs/org_ca.crt"]
#     ssl_verify_mode => "force_peer"
#   }
# }

input {
    http {
    port => 5044
    user => elastic
    password => some_password
  }
}

filter {
    grok {
        match => { "message" => "%{COMBINEDAPACHELOG} \"%{GREEDYDATA:client_ip}, %{GREEDYDATA:proxy_ip}\""}
    }
    mutate {
        convert => ["bytes", "integer"]
    }
    geoip {
        source => "client_ip"
        target => "client_geoip"
    }
    useragent {
        source => "message"
        target => "user_agent"
    }
    # # Enable if you need access to these fields without nesting
    # mutate {
    #     copy => { "[user_agent][os][name]" => "operating_system" }
    #     copy => { "[user_agent][name]" => "browser" }
    # }
}

output {
    elasticsearch {
        hosts => "elasticsearch:9200"
        index => "connectors-%{+YYYY.MM.dd}"
        user => "elastic"
        password => "some_password"
    }
    stdout { codec => rubydebug }
    http {
        url => "http://onenet:8080/api/v1/monitoring/network/trigger-transactions"
        http_method => post
        retry_failed => false
        retry_non_idempotent => false
    }
}
